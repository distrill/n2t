// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And (a=instruction[15], b=instruction[15], out=op);
    Not (in=op, out=notOp);
    Or (a=instruction[5], b=notOp, out=writeA);

    Mux16 (a=instruction, b=aluB, sel=instruction[15], out=InstructionOrALU);
    ARegister (in=InstructionOrALU, load=writeA, out=a1, out=a2, out=a3);

    Mux16 (a=a1, b=inM, sel=instruction[12], out=aOrM);
    DRegister (in=aluC, load=instruction[4], out=d);

    ALU (
    	x=d,
	y=aOrM, 
	zx=instruction[11],
	nx=instruction[10],
	zy=instruction[9],
	ny=instruction[8],
	f=instruction[7],
	no=instruction[6],
        out=aluA,
	out=aluB,
	out=aluC,
	zr=aluZr,
	ng=aluNg
    );

    DMux8Way (
        in=true,
        sel=instruction[0..2],
	a=nojump,
	b=jgt,
	c=jeq,
	d=jge,
	e=jlt,
	f=jne,
	g=jle,
	h=jmp
    );

    Not (in=aluZr, out=nAluZr);
    Not (in=aluNg, out=nAluNg);

    // some of these could have been used raw, but we
    // rename them for consistency and clear intent
    And (a=nAluZr, b=nAluNg, out=gt);
    And (a=aluZr, b=aluZr, out=eq);
    Not (in=aluNg, out=ge);
    And (a=aluNg, b=aluNg, out=lt);
    Not (in=aluZr, out=ne);
    Or (a=aluZr, b=aluNg, out=le);

    And (a=jgt, b=gt, out=j1);
    And (a=jeq, b=eq, out=j2);
    And (a=jge, b=ge, out=j3);
    And (a=jlt, b=lt, out=j4);
    And (a=jne, b=ne, out=j5);
    And (a=jle, b=le, out=j6);

    Or8Way (
    	in[0]=false,
	in[1]=j1,
	in[2]=j2,
	in[3]=j3,
	in[4]=j4,
	in[5]=j5,
	in[6]=j6,
	in[7]=jmp,
	out=jump1
    );

    And (a=jump1, b=op, out=jump);

    PC (
       in=a3,
       load=jump,
       inc=true,
       reset=reset,
       out[0..14]=pc
    );
    And (a=instruction[3], b=op, out=writeM);

    // these could (should IRL) come directly from the chip outputs.
    // we rename here to keep the output names consistent and
    // make this easier to reason about
    And16 (a=a2, b=a2, out[0..14]=addressM);
    And16 (a=aluA, b=aluA, out=outM);
}
